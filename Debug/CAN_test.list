
CAN_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026f8  080026f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026f8  080026f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026f8  080026f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026f8  080026f8  000126f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026fc  080026fc  000126fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  0800270c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  0800270c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005f17  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000165f  00000000  00000000  00025f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006d8  00000000  00000000  000275f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050d  00000000  00000000  00027cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016460  00000000  00000000  000281d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007216  00000000  00000000  0003e635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007e6fe  00000000  00000000  0004584b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a08  00000000  00000000  000c3f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c5954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080026bc 	.word	0x080026bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080026bc 	.word	0x080026bc

0800014c <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000152:	2300      	movs	r3, #0
 8000154:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 800015a:	2300      	movs	r3, #0
 800015c:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 800015e:	2300      	movs	r3, #0
 8000160:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000162:	2300      	movs	r3, #0
 8000164:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 800016a:	2300      	movs	r3, #0
 800016c:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 800016e:	2300      	movs	r3, #0
 8000170:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000172:	2300      	movs	r3, #0
 8000174:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000176:	2300      	movs	r3, #0
 8000178:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 800017a:	2300      	movs	r3, #0
 800017c:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 800017e:	2300      	movs	r3, #0
 8000180:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000182:	2300      	movs	r3, #0
 8000184:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000186:	2308      	movs	r3, #8
 8000188:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 800018a:	2300      	movs	r3, #0
 800018c:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 800018e:	2300      	movs	r3, #0
 8000190:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000192:	2300      	movs	r3, #0
 8000194:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000196:	2300      	movs	r3, #0
 8000198:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 800019a:	2300      	movs	r3, #0
 800019c:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 800019e:	2300      	movs	r3, #0
 80001a0:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 80001a2:	2300      	movs	r3, #0
 80001a4:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 80001a6:	2300      	movs	r3, #0
 80001a8:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 80001aa:	2300      	movs	r3, #0
 80001ac:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 80001ae:	2300      	movs	r3, #0
 80001b0:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 80001b2:	2300      	movs	r3, #0
 80001b4:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 80001b6:	2300      	movs	r3, #0
 80001b8:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 80001ba:	2300      	movs	r3, #0
 80001bc:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 80001be:	2300      	movs	r3, #0
 80001c0:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 80001c2:	2300      	movs	r3, #0
 80001c4:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 80001c6:	2308      	movs	r3, #8
 80001c8:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 80001ca:	2300      	movs	r3, #0
 80001cc:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 80001ce:	2300      	movs	r3, #0
 80001d0:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 80001d2:	f000 fa0d 	bl	80005f0 <MCP2515_Initialize>
 80001d6:	4603      	mov	r3, r0
 80001d8:	f083 0301 	eor.w	r3, r3, #1
 80001dc:	b2db      	uxtb	r3, r3
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <CANSPI_Initialize+0x9a>
  {
    return false;
 80001e2:	2300      	movs	r3, #0
 80001e4:	e05e      	b.n	80002a4 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 80001e6:	f000 fa25 	bl	8000634 <MCP2515_SetConfigMode>
 80001ea:	4603      	mov	r3, r0
 80001ec:	f083 0301 	eor.w	r3, r3, #1
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d001      	beq.n	80001fa <CANSPI_Initialize+0xae>
  {
    return false;
 80001f6:	2300      	movs	r3, #0
 80001f8:	e054      	b.n	80002a4 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	461a      	mov	r2, r3
 80001fe:	2123      	movs	r1, #35	; 0x23
 8000200:	2020      	movs	r0, #32
 8000202:	f000 fabb 	bl	800077c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000206:	463b      	mov	r3, r7
 8000208:	461a      	mov	r2, r3
 800020a:	2127      	movs	r1, #39	; 0x27
 800020c:	2024      	movs	r0, #36	; 0x24
 800020e:	f000 fab5 	bl	800077c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000212:	f107 031c 	add.w	r3, r7, #28
 8000216:	461a      	mov	r2, r3
 8000218:	2103      	movs	r1, #3
 800021a:	2000      	movs	r0, #0
 800021c:	f000 faae 	bl	800077c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000220:	f107 0318 	add.w	r3, r7, #24
 8000224:	461a      	mov	r2, r3
 8000226:	2107      	movs	r1, #7
 8000228:	2004      	movs	r0, #4
 800022a:	f000 faa7 	bl	800077c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800022e:	f107 0314 	add.w	r3, r7, #20
 8000232:	461a      	mov	r2, r3
 8000234:	210b      	movs	r1, #11
 8000236:	2008      	movs	r0, #8
 8000238:	f000 faa0 	bl	800077c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 800023c:	f107 0310 	add.w	r3, r7, #16
 8000240:	461a      	mov	r2, r3
 8000242:	2113      	movs	r1, #19
 8000244:	2010      	movs	r0, #16
 8000246:	f000 fa99 	bl	800077c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 800024a:	f107 030c 	add.w	r3, r7, #12
 800024e:	461a      	mov	r2, r3
 8000250:	2117      	movs	r1, #23
 8000252:	2014      	movs	r0, #20
 8000254:	f000 fa92 	bl	800077c <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000258:	f107 0308 	add.w	r3, r7, #8
 800025c:	461a      	mov	r2, r3
 800025e:	211b      	movs	r1, #27
 8000260:	2018      	movs	r0, #24
 8000262:	f000 fa8b 	bl	800077c <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000266:	2104      	movs	r1, #4
 8000268:	2060      	movs	r0, #96	; 0x60
 800026a:	f000 fa63 	bl	8000734 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 800026e:	2101      	movs	r1, #1
 8000270:	2070      	movs	r0, #112	; 0x70
 8000272:	f000 fa5f 	bl	8000734 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000276:	2100      	movs	r1, #0
 8000278:	202a      	movs	r0, #42	; 0x2a
 800027a:	f000 fa5b 	bl	8000734 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 800027e:	21e5      	movs	r1, #229	; 0xe5
 8000280:	2029      	movs	r0, #41	; 0x29
 8000282:	f000 fa57 	bl	8000734 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000286:	2183      	movs	r1, #131	; 0x83
 8000288:	2028      	movs	r0, #40	; 0x28
 800028a:	f000 fa53 	bl	8000734 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 800028e:	f000 f9ef 	bl	8000670 <MCP2515_SetNormalMode>
 8000292:	4603      	mov	r3, r0
 8000294:	f083 0301 	eor.w	r3, r3, #1
 8000298:	b2db      	uxtb	r3, r3
 800029a:	2b00      	cmp	r3, #0
 800029c:	d001      	beq.n	80002a2 <CANSPI_Initialize+0x156>
    return false;
 800029e:	2300      	movs	r3, #0
 80002a0:	e000      	b.n	80002a4 <CANSPI_Initialize+0x158>
  
  return true;
 80002a2:	2301      	movs	r3, #1
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	3720      	adds	r7, #32
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bd80      	pop	{r7, pc}

080002ac <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 80002b8:	4b36      	ldr	r3, [pc, #216]	; (8000394 <CANSPI_Transmit+0xe8>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 80002be:	4b35      	ldr	r3, [pc, #212]	; (8000394 <CANSPI_Transmit+0xe8>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 80002c4:	4b33      	ldr	r3, [pc, #204]	; (8000394 <CANSPI_Transmit+0xe8>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 80002ca:	4b32      	ldr	r3, [pc, #200]	; (8000394 <CANSPI_Transmit+0xe8>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 80002d0:	f000 fac2 	bl	8000858 <MCP2515_ReadStatus>
 80002d4:	4603      	mov	r3, r0
 80002d6:	461a      	mov	r2, r3
 80002d8:	4b2f      	ldr	r3, [pc, #188]	; (8000398 <CANSPI_Transmit+0xec>)
 80002da:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 80002dc:	4b2e      	ldr	r3, [pc, #184]	; (8000398 <CANSPI_Transmit+0xec>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	f003 0304 	and.w	r3, r3, #4
 80002e4:	b2db      	uxtb	r3, r3
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d115      	bne.n	8000316 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	6858      	ldr	r0, [r3, #4]
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4a28      	ldr	r2, [pc, #160]	; (8000394 <CANSPI_Transmit+0xe8>)
 80002f4:	4619      	mov	r1, r3
 80002f6:	f000 f927 	bl	8000548 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	7a1a      	ldrb	r2, [r3, #8]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	3309      	adds	r3, #9
 8000302:	4924      	ldr	r1, [pc, #144]	; (8000394 <CANSPI_Transmit+0xe8>)
 8000304:	2040      	movs	r0, #64	; 0x40
 8000306:	f000 fa63 	bl	80007d0 <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 800030a:	2081      	movs	r0, #129	; 0x81
 800030c:	f000 fa8a 	bl	8000824 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000310:	2301      	movs	r3, #1
 8000312:	73fb      	strb	r3, [r7, #15]
 8000314:	e038      	b.n	8000388 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8000316:	4b20      	ldr	r3, [pc, #128]	; (8000398 <CANSPI_Transmit+0xec>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	f003 0310 	and.w	r3, r3, #16
 800031e:	b2db      	uxtb	r3, r3
 8000320:	2b00      	cmp	r3, #0
 8000322:	d115      	bne.n	8000350 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	6858      	ldr	r0, [r3, #4]
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	4a19      	ldr	r2, [pc, #100]	; (8000394 <CANSPI_Transmit+0xe8>)
 800032e:	4619      	mov	r1, r3
 8000330:	f000 f90a 	bl	8000548 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	7a1a      	ldrb	r2, [r3, #8]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	3309      	adds	r3, #9
 800033c:	4915      	ldr	r1, [pc, #84]	; (8000394 <CANSPI_Transmit+0xe8>)
 800033e:	2042      	movs	r0, #66	; 0x42
 8000340:	f000 fa46 	bl	80007d0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8000344:	2082      	movs	r0, #130	; 0x82
 8000346:	f000 fa6d 	bl	8000824 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800034a:	2301      	movs	r3, #1
 800034c:	73fb      	strb	r3, [r7, #15]
 800034e:	e01b      	b.n	8000388 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <CANSPI_Transmit+0xec>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d114      	bne.n	8000388 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	6858      	ldr	r0, [r3, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4a0b      	ldr	r2, [pc, #44]	; (8000394 <CANSPI_Transmit+0xe8>)
 8000368:	4619      	mov	r1, r3
 800036a:	f000 f8ed 	bl	8000548 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	7a1a      	ldrb	r2, [r3, #8]
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	3309      	adds	r3, #9
 8000376:	4907      	ldr	r1, [pc, #28]	; (8000394 <CANSPI_Transmit+0xe8>)
 8000378:	2044      	movs	r0, #68	; 0x44
 800037a:	f000 fa29 	bl	80007d0 <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800037e:	2084      	movs	r0, #132	; 0x84
 8000380:	f000 fa50 	bl	8000824 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8000384:	2301      	movs	r3, #1
 8000386:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8000388:	7bfb      	ldrb	r3, [r7, #15]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000002c 	.word	0x2000002c
 8000398:	20000028 	.word	0x20000028

0800039c <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b088      	sub	sp, #32
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80003a4:	2300      	movs	r3, #0
 80003a6:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80003a8:	f000 fa72 	bl	8000890 <MCP2515_GetRxStatus>
 80003ac:	4603      	mov	r3, r0
 80003ae:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80003b0:	7b3b      	ldrb	r3, [r7, #12]
 80003b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d066      	beq.n	800048a <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80003bc:	7b3b      	ldrb	r3, [r7, #12]
 80003be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003c2:	b2db      	uxtb	r3, r3
 80003c4:	2b40      	cmp	r3, #64	; 0x40
 80003c6:	bf0c      	ite	eq
 80003c8:	2301      	moveq	r3, #1
 80003ca:	2300      	movne	r3, #0
 80003cc:	b2da      	uxtb	r2, r3
 80003ce:	7b3b      	ldrb	r3, [r7, #12]
 80003d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2bc0      	cmp	r3, #192	; 0xc0
 80003d8:	bf0c      	ite	eq
 80003da:	2301      	moveq	r3, #1
 80003dc:	2300      	movne	r3, #0
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4313      	orrs	r3, r2
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d007      	beq.n	80003f8 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80003e8:	f107 0310 	add.w	r3, r7, #16
 80003ec:	220d      	movs	r2, #13
 80003ee:	4619      	mov	r1, r3
 80003f0:	2090      	movs	r0, #144	; 0x90
 80003f2:	f000 f97d 	bl	80006f0 <MCP2515_ReadRxSequence>
 80003f6:	e00c      	b.n	8000412 <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 80003f8:	7b3b      	ldrb	r3, [r7, #12]
 80003fa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	2b80      	cmp	r3, #128	; 0x80
 8000402:	d106      	bne.n	8000412 <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8000404:	f107 0310 	add.w	r3, r7, #16
 8000408:	220d      	movs	r2, #13
 800040a:	4619      	mov	r1, r3
 800040c:	2094      	movs	r0, #148	; 0x94
 800040e:	f000 f96f 	bl	80006f0 <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 8000412:	7b3b      	ldrb	r3, [r7, #12]
 8000414:	f003 0318 	and.w	r3, r3, #24
 8000418:	b2db      	uxtb	r3, r3
 800041a:	2b10      	cmp	r3, #16
 800041c:	d10c      	bne.n	8000438 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	2202      	movs	r2, #2
 8000422:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8000424:	7cb8      	ldrb	r0, [r7, #18]
 8000426:	7cf9      	ldrb	r1, [r7, #19]
 8000428:	7c3a      	ldrb	r2, [r7, #16]
 800042a:	7c7b      	ldrb	r3, [r7, #17]
 800042c:	f000 f832 	bl	8000494 <convertReg2ExtendedCANid>
 8000430:	4602      	mov	r2, r0
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	605a      	str	r2, [r3, #4]
 8000436:	e00b      	b.n	8000450 <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2201      	movs	r2, #1
 800043c:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800043e:	7c3b      	ldrb	r3, [r7, #16]
 8000440:	7c7a      	ldrb	r2, [r7, #17]
 8000442:	4611      	mov	r1, r2
 8000444:	4618      	mov	r0, r3
 8000446:	f000 f863 	bl	8000510 <convertReg2StandardCANid>
 800044a:	4602      	mov	r2, r0
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 8000450:	7d3a      	ldrb	r2, [r7, #20]
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8000456:	7d7a      	ldrb	r2, [r7, #21]
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 800045c:	7dba      	ldrb	r2, [r7, #22]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 8000462:	7dfa      	ldrb	r2, [r7, #23]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8000468:	7e3a      	ldrb	r2, [r7, #24]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800046e:	7e7a      	ldrb	r2, [r7, #25]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8000474:	7eba      	ldrb	r2, [r7, #26]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 800047a:	7efa      	ldrb	r2, [r7, #27]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8000480:	7f3a      	ldrb	r2, [r7, #28]
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8000486:	2301      	movs	r3, #1
 8000488:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 800048a:	7ffb      	ldrb	r3, [r7, #31]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3720      	adds	r7, #32
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}

08000494 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000494:	b490      	push	{r4, r7}
 8000496:	b086      	sub	sp, #24
 8000498:	af00      	add	r7, sp, #0
 800049a:	4604      	mov	r4, r0
 800049c:	4608      	mov	r0, r1
 800049e:	4611      	mov	r1, r2
 80004a0:	461a      	mov	r2, r3
 80004a2:	4623      	mov	r3, r4
 80004a4:	71fb      	strb	r3, [r7, #7]
 80004a6:	4603      	mov	r3, r0
 80004a8:	71bb      	strb	r3, [r7, #6]
 80004aa:	460b      	mov	r3, r1
 80004ac:	717b      	strb	r3, [r7, #5]
 80004ae:	4613      	mov	r3, r2
 80004b0:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80004ba:	793b      	ldrb	r3, [r7, #4]
 80004bc:	f003 0303 	and.w	r3, r3, #3
 80004c0:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80004c2:	793b      	ldrb	r3, [r7, #4]
 80004c4:	095b      	lsrs	r3, r3, #5
 80004c6:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80004c8:	797b      	ldrb	r3, [r7, #5]
 80004ca:	00db      	lsls	r3, r3, #3
 80004cc:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80004ce:	7bbb      	ldrb	r3, [r7, #14]
 80004d0:	693a      	ldr	r2, [r7, #16]
 80004d2:	4413      	add	r3, r2
 80004d4:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	009b      	lsls	r3, r3, #2
 80004da:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80004dc:	7bfb      	ldrb	r3, [r7, #15]
 80004de:	693a      	ldr	r2, [r7, #16]
 80004e0:	4413      	add	r3, r2
 80004e2:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80004e4:	693b      	ldr	r3, [r7, #16]
 80004e6:	021b      	lsls	r3, r3, #8
 80004e8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	693a      	ldr	r2, [r7, #16]
 80004ee:	4413      	add	r3, r2
 80004f0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80004f2:	693b      	ldr	r3, [r7, #16]
 80004f4:	021b      	lsls	r3, r3, #8
 80004f6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	693a      	ldr	r2, [r7, #16]
 80004fc:	4413      	add	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 8000500:	693b      	ldr	r3, [r7, #16]
 8000502:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8000504:	697b      	ldr	r3, [r7, #20]
}
 8000506:	4618      	mov	r0, r3
 8000508:	3718      	adds	r7, #24
 800050a:	46bd      	mov	sp, r7
 800050c:	bc90      	pop	{r4, r7}
 800050e:	4770      	bx	lr

08000510 <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 8000510:	b480      	push	{r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	4603      	mov	r3, r0
 8000518:	460a      	mov	r2, r1
 800051a:	71fb      	strb	r3, [r7, #7]
 800051c:	4613      	mov	r3, r2
 800051e:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 8000520:	2300      	movs	r3, #0
 8000522:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8000524:	79fb      	ldrb	r3, [r7, #7]
 8000526:	00db      	lsls	r3, r3, #3
 8000528:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 800052a:	79bb      	ldrb	r3, [r7, #6]
 800052c:	095b      	lsrs	r3, r3, #5
 800052e:	b2db      	uxtb	r3, r3
 8000530:	461a      	mov	r2, r3
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4413      	add	r3, r2
 8000536:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 800053c:	68fb      	ldr	r3, [r7, #12]
}
 800053e:	4618      	mov	r0, r3
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8000548:	b480      	push	{r7}
 800054a:	b087      	sub	sp, #28
 800054c:	af00      	add	r7, sp, #0
 800054e:	60f8      	str	r0, [r7, #12]
 8000550:	460b      	mov	r3, r1
 8000552:	607a      	str	r2, [r7, #4]
 8000554:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 800055a:	7afb      	ldrb	r3, [r7, #11]
 800055c:	2b02      	cmp	r3, #2
 800055e:	d12e      	bne.n	80005be <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	b2da      	uxtb	r2, r3
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	0a1b      	lsrs	r3, r3, #8
 800056c:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	0a1b      	lsrs	r3, r3, #8
 800057a:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	f003 0303 	and.w	r3, r3, #3
 8000584:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f023 031f 	bic.w	r3, r3, #31
 8000594:	b2da      	uxtb	r2, r3
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	4413      	add	r3, r2
 800059a:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 800059c:	7dfb      	ldrb	r3, [r7, #23]
 800059e:	3308      	adds	r3, #8
 80005a0:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80005a2:	7dfb      	ldrb	r3, [r7, #23]
 80005a4:	f023 0314 	bic.w	r3, r3, #20
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	0a1b      	lsrs	r3, r3, #8
 80005b2:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80005bc:	e013      	b.n	80005e6 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	2200      	movs	r2, #0
 80005c2:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	015b      	lsls	r3, r3, #5
 80005ce:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	0a1b      	lsrs	r3, r3, #8
 80005dc:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	b2da      	uxtb	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	701a      	strb	r2, [r3, #0]
}
 80005e6:	bf00      	nop
 80005e8:	371c      	adds	r7, #28
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr

080005f0 <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();    
 80005f6:	2201      	movs	r2, #1
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	480c      	ldr	r0, [pc, #48]	; (800062c <MCP2515_Initialize+0x3c>)
 80005fc:	f000 fea8 	bl	8001350 <HAL_GPIO_WritePin>
  
  uint8_t loop = 10;
 8000600:	230a      	movs	r3, #10
 8000602:	71fb      	strb	r3, [r7, #7]
  
  do {
    /* check SPI Ready */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <MCP2515_Initialize+0x40>)
 8000606:	f001 ff28 	bl	800245a <HAL_SPI_GetState>
 800060a:	4603      	mov	r3, r0
 800060c:	2b01      	cmp	r3, #1
 800060e:	d101      	bne.n	8000614 <MCP2515_Initialize+0x24>
      return true;
 8000610:	2301      	movs	r3, #1
 8000612:	e006      	b.n	8000622 <MCP2515_Initialize+0x32>
    
    loop--;
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	3b01      	subs	r3, #1
 8000618:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1f1      	bne.n	8000604 <MCP2515_Initialize+0x14>
      
  return false;
 8000620:	2300      	movs	r3, #0
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010c00 	.word	0x40010c00
 8000630:	20000030 	.word	0x20000030

08000634 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800063a:	2180      	movs	r1, #128	; 0x80
 800063c:	200f      	movs	r0, #15
 800063e:	f000 f879 	bl	8000734 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 8000642:	230a      	movs	r3, #10
 8000644:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8000646:	200e      	movs	r0, #14
 8000648:	f000 f830 	bl	80006ac <MCP2515_ReadByte>
 800064c:	4603      	mov	r3, r0
 800064e:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000652:	2b80      	cmp	r3, #128	; 0x80
 8000654:	d101      	bne.n	800065a <MCP2515_SetConfigMode+0x26>
      return true;
 8000656:	2301      	movs	r3, #1
 8000658:	e006      	b.n	8000668 <MCP2515_SetConfigMode+0x34>
    
    loop--;
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	3b01      	subs	r3, #1
 800065e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0); 
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d1ef      	bne.n	8000646 <MCP2515_SetConfigMode+0x12>
  
  return false;
 8000666:	2300      	movs	r3, #0
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}

08000670 <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
  /* configure CANCTRL Register */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000676:	2100      	movs	r1, #0
 8000678:	200f      	movs	r0, #15
 800067a:	f000 f85b 	bl	8000734 <MCP2515_WriteByte>
  
  uint8_t loop = 10;
 800067e:	230a      	movs	r3, #10
 8000680:	71fb      	strb	r3, [r7, #7]
  
  do {    
    /* confirm mode configuration */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 8000682:	200e      	movs	r0, #14
 8000684:	f000 f812 	bl	80006ac <MCP2515_ReadByte>
 8000688:	4603      	mov	r3, r0
 800068a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d101      	bne.n	8000696 <MCP2515_SetNormalMode+0x26>
      return true;
 8000692:	2301      	movs	r3, #1
 8000694:	e006      	b.n	80006a4 <MCP2515_SetNormalMode+0x34>
    
    loop--;
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	3b01      	subs	r3, #1
 800069a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1ef      	bne.n	8000682 <MCP2515_SetNormalMode+0x12>
  
  return false;
 80006a2:	2300      	movs	r3, #0
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <MCP2515_ReadByte+0x40>)
 80006bc:	f000 fe48 	bl	8001350 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ);
 80006c0:	2003      	movs	r0, #3
 80006c2:	f000 f901 	bl	80008c8 <SPI_Tx>
  SPI_Tx(address);
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	4618      	mov	r0, r3
 80006ca:	f000 f8fd 	bl	80008c8 <SPI_Tx>
  retVal = SPI_Rx();
 80006ce:	f000 f921 	bl	8000914 <SPI_Rx>
 80006d2:	4603      	mov	r3, r0
 80006d4:	73fb      	strb	r3, [r7, #15]
      
  MCP2515_CS_HIGH();
 80006d6:	2201      	movs	r2, #1
 80006d8:	2140      	movs	r1, #64	; 0x40
 80006da:	4804      	ldr	r0, [pc, #16]	; (80006ec <MCP2515_ReadByte+0x40>)
 80006dc:	f000 fe38 	bl	8001350 <HAL_GPIO_WritePin>
  
  return retVal;
 80006e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3710      	adds	r7, #16
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40010c00 	.word	0x40010c00

080006f0 <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
 80006fc:	4613      	mov	r3, r2
 80006fe:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000700:	2200      	movs	r2, #0
 8000702:	2140      	movs	r1, #64	; 0x40
 8000704:	480a      	ldr	r0, [pc, #40]	; (8000730 <MCP2515_ReadRxSequence+0x40>)
 8000706:	f000 fe23 	bl	8001350 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);        
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	4618      	mov	r0, r3
 800070e:	f000 f8db 	bl	80008c8 <SPI_Tx>
  SPI_RxBuffer(data, length);
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	4619      	mov	r1, r3
 8000716:	6838      	ldr	r0, [r7, #0]
 8000718:	f000 f90c 	bl	8000934 <SPI_RxBuffer>
    
  MCP2515_CS_HIGH();
 800071c:	2201      	movs	r2, #1
 800071e:	2140      	movs	r1, #64	; 0x40
 8000720:	4803      	ldr	r0, [pc, #12]	; (8000730 <MCP2515_ReadRxSequence+0x40>)
 8000722:	f000 fe15 	bl	8001350 <HAL_GPIO_WritePin>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40010c00 	.word	0x40010c00

08000734 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{    
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();  
 8000744:	2200      	movs	r2, #0
 8000746:	2140      	movs	r1, #64	; 0x40
 8000748:	480b      	ldr	r0, [pc, #44]	; (8000778 <MCP2515_WriteByte+0x44>)
 800074a:	f000 fe01 	bl	8001350 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 800074e:	2002      	movs	r0, #2
 8000750:	f000 f8ba 	bl	80008c8 <SPI_Tx>
  SPI_Tx(address);
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	4618      	mov	r0, r3
 8000758:	f000 f8b6 	bl	80008c8 <SPI_Tx>
  SPI_Tx(data);  
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f8b2 	bl	80008c8 <SPI_Tx>
    
  MCP2515_CS_HIGH();
 8000764:	2201      	movs	r2, #1
 8000766:	2140      	movs	r1, #64	; 0x40
 8000768:	4803      	ldr	r0, [pc, #12]	; (8000778 <MCP2515_WriteByte+0x44>)
 800076a:	f000 fdf1 	bl	8001350 <HAL_GPIO_WritePin>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	40010c00 	.word	0x40010c00

0800077c <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{    
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	603a      	str	r2, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
 8000788:	460b      	mov	r3, r1
 800078a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800078c:	2200      	movs	r2, #0
 800078e:	2140      	movs	r1, #64	; 0x40
 8000790:	480e      	ldr	r0, [pc, #56]	; (80007cc <MCP2515_WriteByteSequence+0x50>)
 8000792:	f000 fddd 	bl	8001350 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_WRITE);
 8000796:	2002      	movs	r0, #2
 8000798:	f000 f896 	bl	80008c8 <SPI_Tx>
  SPI_Tx(startAddress);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4618      	mov	r0, r3
 80007a0:	f000 f892 	bl	80008c8 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80007a4:	79ba      	ldrb	r2, [r7, #6]
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	1ad3      	subs	r3, r2, r3
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4619      	mov	r1, r3
 80007b2:	6838      	ldr	r0, [r7, #0]
 80007b4:	f000 f89a 	bl	80008ec <SPI_TxBuffer>
  
  MCP2515_CS_HIGH();
 80007b8:	2201      	movs	r2, #1
 80007ba:	2140      	movs	r1, #64	; 0x40
 80007bc:	4803      	ldr	r0, [pc, #12]	; (80007cc <MCP2515_WriteByteSequence+0x50>)
 80007be:	f000 fdc7 	bl	8001350 <HAL_GPIO_WritePin>
}
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40010c00 	.word	0x40010c00

080007d0 <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{    
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60b9      	str	r1, [r7, #8]
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4603      	mov	r3, r0
 80007dc:	73fb      	strb	r3, [r7, #15]
 80007de:	4613      	mov	r3, r2
 80007e0:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80007e2:	2200      	movs	r2, #0
 80007e4:	2140      	movs	r1, #64	; 0x40
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <MCP2515_LoadTxSequence+0x50>)
 80007e8:	f000 fdb2 	bl	8001350 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 80007ec:	7bfb      	ldrb	r3, [r7, #15]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 f86a 	bl	80008c8 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80007f4:	2104      	movs	r1, #4
 80007f6:	68b8      	ldr	r0, [r7, #8]
 80007f8:	f000 f878 	bl	80008ec <SPI_TxBuffer>
  SPI_Tx(dlc);
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f862 	bl	80008c8 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8000804:	7bbb      	ldrb	r3, [r7, #14]
 8000806:	4619      	mov	r1, r3
 8000808:	6878      	ldr	r0, [r7, #4]
 800080a:	f000 f86f 	bl	80008ec <SPI_TxBuffer>
       
  MCP2515_CS_HIGH();
 800080e:	2201      	movs	r2, #1
 8000810:	2140      	movs	r1, #64	; 0x40
 8000812:	4803      	ldr	r0, [pc, #12]	; (8000820 <MCP2515_LoadTxSequence+0x50>)
 8000814:	f000 fd9c 	bl	8001350 <HAL_GPIO_WritePin>
}
 8000818:	bf00      	nop
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40010c00 	.word	0x40010c00

08000824 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800082e:	2200      	movs	r2, #0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4808      	ldr	r0, [pc, #32]	; (8000854 <MCP2515_RequestToSend+0x30>)
 8000834:	f000 fd8c 	bl	8001350 <HAL_GPIO_WritePin>
  
  SPI_Tx(instruction);
 8000838:	79fb      	ldrb	r3, [r7, #7]
 800083a:	4618      	mov	r0, r3
 800083c:	f000 f844 	bl	80008c8 <SPI_Tx>
      
  MCP2515_CS_HIGH();
 8000840:	2201      	movs	r2, #1
 8000842:	2140      	movs	r1, #64	; 0x40
 8000844:	4803      	ldr	r0, [pc, #12]	; (8000854 <MCP2515_RequestToSend+0x30>)
 8000846:	f000 fd83 	bl	8001350 <HAL_GPIO_WritePin>
}
 800084a:	bf00      	nop
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40010c00 	.word	0x40010c00

08000858 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 800085e:	2200      	movs	r2, #0
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	480a      	ldr	r0, [pc, #40]	; (800088c <MCP2515_ReadStatus+0x34>)
 8000864:	f000 fd74 	bl	8001350 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_READ_STATUS);
 8000868:	20a0      	movs	r0, #160	; 0xa0
 800086a:	f000 f82d 	bl	80008c8 <SPI_Tx>
  retVal = SPI_Rx();
 800086e:	f000 f851 	bl	8000914 <SPI_Rx>
 8000872:	4603      	mov	r3, r0
 8000874:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 8000876:	2201      	movs	r2, #1
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4804      	ldr	r0, [pc, #16]	; (800088c <MCP2515_ReadStatus+0x34>)
 800087c:	f000 fd68 	bl	8001350 <HAL_GPIO_WritePin>
  
  return retVal;
 8000880:	79fb      	ldrb	r3, [r7, #7]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	40010c00 	.word	0x40010c00

08000890 <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
  uint8_t retVal;
  
  MCP2515_CS_LOW();
 8000896:	2200      	movs	r2, #0
 8000898:	2140      	movs	r1, #64	; 0x40
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <MCP2515_GetRxStatus+0x34>)
 800089c:	f000 fd58 	bl	8001350 <HAL_GPIO_WritePin>
  
  SPI_Tx(MCP2515_RX_STATUS);
 80008a0:	20b0      	movs	r0, #176	; 0xb0
 80008a2:	f000 f811 	bl	80008c8 <SPI_Tx>
  retVal = SPI_Rx();
 80008a6:	f000 f835 	bl	8000914 <SPI_Rx>
 80008aa:	4603      	mov	r3, r0
 80008ac:	71fb      	strb	r3, [r7, #7]
        
  MCP2515_CS_HIGH();
 80008ae:	2201      	movs	r2, #1
 80008b0:	2140      	movs	r1, #64	; 0x40
 80008b2:	4804      	ldr	r0, [pc, #16]	; (80008c4 <MCP2515_GetRxStatus+0x34>)
 80008b4:	f000 fd4c 	bl	8001350 <HAL_GPIO_WritePin>
  
  return retVal;
 80008b8:	79fb      	ldrb	r3, [r7, #7]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010c00 	.word	0x40010c00

080008c8 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);    
 80008d2:	1df9      	adds	r1, r7, #7
 80008d4:	230a      	movs	r3, #10
 80008d6:	2201      	movs	r2, #1
 80008d8:	4803      	ldr	r0, [pc, #12]	; (80008e8 <SPI_Tx+0x20>)
 80008da:	f001 f9b3 	bl	8001c44 <HAL_SPI_Transmit>
}
 80008de:	bf00      	nop
 80008e0:	3708      	adds	r7, #8
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000030 	.word	0x20000030

080008ec <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);    
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	b29a      	uxth	r2, r3
 80008fc:	230a      	movs	r3, #10
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	4803      	ldr	r0, [pc, #12]	; (8000910 <SPI_TxBuffer+0x24>)
 8000902:	f001 f99f 	bl	8001c44 <HAL_SPI_Transmit>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	20000030 	.word	0x20000030

08000914 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800091a:	1df9      	adds	r1, r7, #7
 800091c:	230a      	movs	r3, #10
 800091e:	2201      	movs	r2, #1
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <SPI_Rx+0x1c>)
 8000922:	f001 fad2 	bl	8001eca <HAL_SPI_Receive>
  return retVal;
 8000926:	79fb      	ldrb	r3, [r7, #7]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000030 	.word	0x20000030

08000934 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	460b      	mov	r3, r1
 800093e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000940:	78fb      	ldrb	r3, [r7, #3]
 8000942:	b29a      	uxth	r2, r3
 8000944:	230a      	movs	r3, #10
 8000946:	6879      	ldr	r1, [r7, #4]
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <SPI_RxBuffer+0x24>)
 800094a:	f001 fabe 	bl	8001eca <HAL_SPI_Receive>
}
 800094e:	bf00      	nop
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000030 	.word	0x20000030

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000960:	f000 fa08 	bl	8000d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000964:	f000 f86a 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000968:	f000 f8e4 	bl	8000b34 <MX_GPIO_Init>
  MX_SPI1_Init();
 800096c:	f000 f8ac 	bl	8000ac8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  CANSPI_Initialize();
 8000970:	f7ff fbec 	bl	800014c <CANSPI_Initialize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(CANSPI_Receive(&rxMessage))
 8000974:	482f      	ldr	r0, [pc, #188]	; (8000a34 <main+0xd8>)
 8000976:	f7ff fd11 	bl	800039c <CANSPI_Receive>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d030      	beq.n	80009e2 <main+0x86>
	  	      {
	  	        txMessage.frame.idType = rxMessage.frame.idType;
 8000980:	4b2c      	ldr	r3, [pc, #176]	; (8000a34 <main+0xd8>)
 8000982:	781a      	ldrb	r2, [r3, #0]
 8000984:	4b2c      	ldr	r3, [pc, #176]	; (8000a38 <main+0xdc>)
 8000986:	701a      	strb	r2, [r3, #0]
	  	        txMessage.frame.id = rxMessage.frame.id;
 8000988:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <main+0xd8>)
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	4a2a      	ldr	r2, [pc, #168]	; (8000a38 <main+0xdc>)
 800098e:	6053      	str	r3, [r2, #4]
	  	        txMessage.frame.dlc = rxMessage.frame.dlc;
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <main+0xd8>)
 8000992:	7a1a      	ldrb	r2, [r3, #8]
 8000994:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <main+0xdc>)
 8000996:	721a      	strb	r2, [r3, #8]
	  	        txMessage.frame.data0++;
 8000998:	4b27      	ldr	r3, [pc, #156]	; (8000a38 <main+0xdc>)
 800099a:	7a5b      	ldrb	r3, [r3, #9]
 800099c:	3301      	adds	r3, #1
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <main+0xdc>)
 80009a2:	725a      	strb	r2, [r3, #9]
	  	        txMessage.frame.data1 = rxMessage.frame.data1;
 80009a4:	4b23      	ldr	r3, [pc, #140]	; (8000a34 <main+0xd8>)
 80009a6:	7a9a      	ldrb	r2, [r3, #10]
 80009a8:	4b23      	ldr	r3, [pc, #140]	; (8000a38 <main+0xdc>)
 80009aa:	729a      	strb	r2, [r3, #10]
	  	        txMessage.frame.data2 = rxMessage.frame.data2;
 80009ac:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <main+0xd8>)
 80009ae:	7ada      	ldrb	r2, [r3, #11]
 80009b0:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <main+0xdc>)
 80009b2:	72da      	strb	r2, [r3, #11]
	  	        txMessage.frame.data3 = rxMessage.frame.data3;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <main+0xd8>)
 80009b6:	7b1a      	ldrb	r2, [r3, #12]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <main+0xdc>)
 80009ba:	731a      	strb	r2, [r3, #12]
	  	        txMessage.frame.data4 = rxMessage.frame.data4;
 80009bc:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <main+0xd8>)
 80009be:	7b5a      	ldrb	r2, [r3, #13]
 80009c0:	4b1d      	ldr	r3, [pc, #116]	; (8000a38 <main+0xdc>)
 80009c2:	735a      	strb	r2, [r3, #13]
	  	        txMessage.frame.data5 = rxMessage.frame.data5;
 80009c4:	4b1b      	ldr	r3, [pc, #108]	; (8000a34 <main+0xd8>)
 80009c6:	7b9a      	ldrb	r2, [r3, #14]
 80009c8:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <main+0xdc>)
 80009ca:	739a      	strb	r2, [r3, #14]
	  	        txMessage.frame.data6 = rxMessage.frame.data6;
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <main+0xd8>)
 80009ce:	7bda      	ldrb	r2, [r3, #15]
 80009d0:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <main+0xdc>)
 80009d2:	73da      	strb	r2, [r3, #15]
	  	        txMessage.frame.data7 = rxMessage.frame.data7;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <main+0xd8>)
 80009d6:	7c1a      	ldrb	r2, [r3, #16]
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <main+0xdc>)
 80009da:	741a      	strb	r2, [r3, #16]
	  	        CANSPI_Transmit(&txMessage);
 80009dc:	4816      	ldr	r0, [pc, #88]	; (8000a38 <main+0xdc>)
 80009de:	f7ff fc65 	bl	80002ac <CANSPI_Transmit>
	  	      }

	  	      txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 80009e2:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <main+0xdc>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	701a      	strb	r2, [r3, #0]
	  	      txMessage.frame.id = 0x0A;
 80009e8:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <main+0xdc>)
 80009ea:	220a      	movs	r2, #10
 80009ec:	605a      	str	r2, [r3, #4]
	  	      txMessage.frame.dlc = 8;
 80009ee:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <main+0xdc>)
 80009f0:	2208      	movs	r2, #8
 80009f2:	721a      	strb	r2, [r3, #8]
	  	      txMessage.frame.data0 = 0;
 80009f4:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <main+0xdc>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	725a      	strb	r2, [r3, #9]
	  	      txMessage.frame.data1 = 1;
 80009fa:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <main+0xdc>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	729a      	strb	r2, [r3, #10]
	  	      txMessage.frame.data2 = 2;
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <main+0xdc>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	72da      	strb	r2, [r3, #11]
	  	      txMessage.frame.data3 = 3;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <main+0xdc>)
 8000a08:	2203      	movs	r2, #3
 8000a0a:	731a      	strb	r2, [r3, #12]
	  	      txMessage.frame.data4 = 4;
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <main+0xdc>)
 8000a0e:	2204      	movs	r2, #4
 8000a10:	735a      	strb	r2, [r3, #13]
	  	      txMessage.frame.data5 = 5;
 8000a12:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <main+0xdc>)
 8000a14:	2205      	movs	r2, #5
 8000a16:	739a      	strb	r2, [r3, #14]
	  	      txMessage.frame.data6 = 6;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <main+0xdc>)
 8000a1a:	2206      	movs	r2, #6
 8000a1c:	73da      	strb	r2, [r3, #15]
	  	      txMessage.frame.data7 = 7;
 8000a1e:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <main+0xdc>)
 8000a20:	2207      	movs	r2, #7
 8000a22:	741a      	strb	r2, [r3, #16]
	  	      CANSPI_Transmit(&txMessage);
 8000a24:	4804      	ldr	r0, [pc, #16]	; (8000a38 <main+0xdc>)
 8000a26:	f7ff fc41 	bl	80002ac <CANSPI_Transmit>

	  	      HAL_Delay(1000);
 8000a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2e:	f000 fa03 	bl	8000e38 <HAL_Delay>
	  if(CANSPI_Receive(&rxMessage))
 8000a32:	e79f      	b.n	8000974 <main+0x18>
 8000a34:	2000009c 	.word	0x2000009c
 8000a38:	20000088 	.word	0x20000088

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b090      	sub	sp, #64	; 0x40
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0318 	add.w	r3, r7, #24
 8000a46:	2228      	movs	r2, #40	; 0x28
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fe0a 	bl	8002664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
 8000a5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a70:	2302      	movs	r3, #2
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a80:	f107 0318 	add.w	r3, r7, #24
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fc7b 	bl	8001380 <HAL_RCC_OscConfig>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000a90:	f000 f89a 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a94:	230f      	movs	r3, #15
 8000a96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aaa:	1d3b      	adds	r3, r7, #4
 8000aac:	2102      	movs	r1, #2
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fee8 	bl	8001884 <HAL_RCC_ClockConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000aba:	f000 f885 	bl	8000bc8 <Error_Handler>
  }
}
 8000abe:	bf00      	nop
 8000ac0:	3740      	adds	r7, #64	; 0x40
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000acc:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ace:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <MX_SPI1_Init+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000af8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000afc:	2210      	movs	r2, #16
 8000afe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b14:	220a      	movs	r2, #10
 8000b16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_SPI1_Init+0x64>)
 8000b1a:	f001 f80f 	bl	8001b3c <HAL_SPI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b24:	f000 f850 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000030 	.word	0x20000030
 8000b30:	40013000 	.word	0x40013000

08000b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b48:	4b1d      	ldr	r3, [pc, #116]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a1c      	ldr	r2, [pc, #112]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b4e:	f043 0320 	orr.w	r3, r3, #32
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0320 	and.w	r3, r3, #32
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b66:	f043 0304 	orr.w	r3, r3, #4
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f003 0304 	and.w	r3, r3, #4
 8000b74:	60bb      	str	r3, [r7, #8]
 8000b76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b78:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	4a10      	ldr	r2, [pc, #64]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b7e:	f043 0308 	orr.w	r3, r3, #8
 8000b82:	6193      	str	r3, [r2, #24]
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_GPIO_Init+0x8c>)
 8000b86:	699b      	ldr	r3, [r3, #24]
 8000b88:	f003 0308 	and.w	r3, r3, #8
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_SET);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2140      	movs	r1, #64	; 0x40
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000b96:	f000 fbdb 	bl	8001350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_CS_Pin */
  GPIO_InitStruct.Pin = CAN_CS_Pin;
 8000b9a:	2340      	movs	r3, #64	; 0x40
 8000b9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_GPIO_Init+0x90>)
 8000bb2:	f000 fa49 	bl	8001048 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bb6:	bf00      	nop
 8000bb8:	3720      	adds	r7, #32
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010c00 	.word	0x40010c00

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bda:	4b15      	ldr	r3, [pc, #84]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a14      	ldr	r2, [pc, #80]	; (8000c30 <HAL_MspInit+0x5c>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_MspInit+0x5c>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b0f      	ldr	r3, [pc, #60]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bf4:	69db      	ldr	r3, [r3, #28]
 8000bf6:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <HAL_MspInit+0x5c>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	61d3      	str	r3, [r2, #28]
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_MspInit+0x5c>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c0a:	4b0a      	ldr	r3, [pc, #40]	; (8000c34 <HAL_MspInit+0x60>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <HAL_MspInit+0x60>)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3714      	adds	r7, #20
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bc80      	pop	{r7}
 8000c2e:	4770      	bx	lr
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000

08000c38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1b      	ldr	r2, [pc, #108]	; (8000cc0 <HAL_SPI_MspInit+0x88>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d12f      	bne.n	8000cb8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c58:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a19      	ldr	r2, [pc, #100]	; (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000c5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a13      	ldr	r2, [pc, #76]	; (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_SPI_MspInit+0x8c>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c88:	23a0      	movs	r3, #160	; 0xa0
 8000c8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0310 	add.w	r3, r7, #16
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <HAL_SPI_MspInit+0x90>)
 8000c9c:	f000 f9d4 	bl	8001048 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <HAL_SPI_MspInit+0x90>)
 8000cb4:	f000 f9c8 	bl	8001048 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40013000 	.word	0x40013000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010800 	.word	0x40010800

08000ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cd0:	e7fe      	b.n	8000cd0 <NMI_Handler+0x4>

08000cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd6:	e7fe      	b.n	8000cd6 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <MemManage_Handler+0x4>

08000cde <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce2:	e7fe      	b.n	8000ce2 <BusFault_Handler+0x4>

08000ce4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce8:	e7fe      	b.n	8000ce8 <UsageFault_Handler+0x4>

08000cea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bc80      	pop	{r7}
 8000d0c:	4770      	bx	lr

08000d0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d12:	f000 f875 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
	...

08000d28 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d28:	f7ff fff7 	bl	8000d1a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d2c:	480b      	ldr	r0, [pc, #44]	; (8000d5c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d2e:	490c      	ldr	r1, [pc, #48]	; (8000d60 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d34:	e002      	b.n	8000d3c <LoopCopyDataInit>

08000d36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3a:	3304      	adds	r3, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d40:	d3f9      	bcc.n	8000d36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d42:	4a09      	ldr	r2, [pc, #36]	; (8000d68 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d44:	4c09      	ldr	r4, [pc, #36]	; (8000d6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d48:	e001      	b.n	8000d4e <LoopFillZerobss>

08000d4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d4c:	3204      	adds	r2, #4

08000d4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d50:	d3fb      	bcc.n	8000d4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d52:	f001 fc8f 	bl	8002674 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d56:	f7ff fe01 	bl	800095c <main>
  bx lr
 8000d5a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d60:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d64:	08002700 	.word	0x08002700
  ldr r2, =_sbss
 8000d68:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d6c:	200000b4 	.word	0x200000b4

08000d70 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d70:	e7fe      	b.n	8000d70 <ADC1_2_IRQHandler>
	...

08000d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <HAL_Init+0x28>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	; (8000d9c <HAL_Init+0x28>)
 8000d7e:	f043 0310 	orr.w	r3, r3, #16
 8000d82:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f92b 	bl	8000fe0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff ff20 	bl	8000bd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40022000 	.word	0x40022000

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f935 	bl	800102e <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ddc:	f000 f90b 	bl	8000ff6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	; (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x1c>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x20>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a03      	ldr	r2, [pc, #12]	; (8000e20 <HAL_IncTick+0x20>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr
 8000e1c:	20000008 	.word	0x20000008
 8000e20:	200000b0 	.word	0x200000b0

08000e24 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <HAL_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	200000b0 	.word	0x200000b0

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff fff0 	bl	8000e24 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e50:	d005      	beq.n	8000e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e52:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <HAL_Delay+0x44>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	461a      	mov	r2, r3
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e5e:	bf00      	nop
 8000e60:	f7ff ffe0 	bl	8000e24 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	68bb      	ldr	r3, [r7, #8]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	68fa      	ldr	r2, [r7, #12]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d8f7      	bhi.n	8000e60 <HAL_Delay+0x28>
  {
  }
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008

08000e80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e96:	68ba      	ldr	r2, [r7, #8]
 8000e98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eb2:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	60d3      	str	r3, [r2, #12]
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ecc:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	0a1b      	lsrs	r3, r3, #8
 8000ed2:	f003 0307 	and.w	r3, r3, #7
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	db0a      	blt.n	8000f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <__NVIC_SetPriority+0x4c>)
 8000efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f02:	0112      	lsls	r2, r2, #4
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	440b      	add	r3, r1
 8000f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f0c:	e00a      	b.n	8000f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b2da      	uxtb	r2, r3
 8000f12:	4908      	ldr	r1, [pc, #32]	; (8000f34 <__NVIC_SetPriority+0x50>)
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	f003 030f 	and.w	r3, r3, #15
 8000f1a:	3b04      	subs	r3, #4
 8000f1c:	0112      	lsls	r2, r2, #4
 8000f1e:	b2d2      	uxtb	r2, r2
 8000f20:	440b      	add	r3, r1
 8000f22:	761a      	strb	r2, [r3, #24]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000e100 	.word	0xe000e100
 8000f34:	e000ed00 	.word	0xe000ed00

08000f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	f1c3 0307 	rsb	r3, r3, #7
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	bf28      	it	cs
 8000f56:	2304      	movcs	r3, #4
 8000f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	2b06      	cmp	r3, #6
 8000f60:	d902      	bls.n	8000f68 <NVIC_EncodePriority+0x30>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3b03      	subs	r3, #3
 8000f66:	e000      	b.n	8000f6a <NVIC_EncodePriority+0x32>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43da      	mvns	r2, r3
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	401a      	ands	r2, r3
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	43d9      	mvns	r1, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f90:	4313      	orrs	r3, r2
         );
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	3724      	adds	r7, #36	; 0x24
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fac:	d301      	bcc.n	8000fb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00f      	b.n	8000fd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fb2:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <SysTick_Config+0x40>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fba:	210f      	movs	r1, #15
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc0:	f7ff ff90 	bl	8000ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc4:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <SysTick_Config+0x40>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fca:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <SysTick_Config+0x40>)
 8000fcc:	2207      	movs	r2, #7
 8000fce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	e000e010 	.word	0xe000e010

08000fe0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f7ff ff49 	bl	8000e80 <__NVIC_SetPriorityGrouping>
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b086      	sub	sp, #24
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	60b9      	str	r1, [r7, #8]
 8001000:	607a      	str	r2, [r7, #4]
 8001002:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001008:	f7ff ff5e 	bl	8000ec8 <__NVIC_GetPriorityGrouping>
 800100c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	6978      	ldr	r0, [r7, #20]
 8001014:	f7ff ff90 	bl	8000f38 <NVIC_EncodePriority>
 8001018:	4602      	mov	r2, r0
 800101a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101e:	4611      	mov	r1, r2
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff5f 	bl	8000ee4 <__NVIC_SetPriority>
}
 8001026:	bf00      	nop
 8001028:	3718      	adds	r7, #24
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffb0 	bl	8000f9c <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
	...

08001048 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001048:	b480      	push	{r7}
 800104a:	b08b      	sub	sp, #44	; 0x2c
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001056:	2300      	movs	r3, #0
 8001058:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105a:	e169      	b.n	8001330 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800105c:	2201      	movs	r2, #1
 800105e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 8158 	bne.w	800132a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	4a9a      	ldr	r2, [pc, #616]	; (80012e8 <HAL_GPIO_Init+0x2a0>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d05e      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 8001084:	4a98      	ldr	r2, [pc, #608]	; (80012e8 <HAL_GPIO_Init+0x2a0>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d875      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 800108a:	4a98      	ldr	r2, [pc, #608]	; (80012ec <HAL_GPIO_Init+0x2a4>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d058      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 8001090:	4a96      	ldr	r2, [pc, #600]	; (80012ec <HAL_GPIO_Init+0x2a4>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d86f      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 8001096:	4a96      	ldr	r2, [pc, #600]	; (80012f0 <HAL_GPIO_Init+0x2a8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d052      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 800109c:	4a94      	ldr	r2, [pc, #592]	; (80012f0 <HAL_GPIO_Init+0x2a8>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d869      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010a2:	4a94      	ldr	r2, [pc, #592]	; (80012f4 <HAL_GPIO_Init+0x2ac>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d04c      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 80010a8:	4a92      	ldr	r2, [pc, #584]	; (80012f4 <HAL_GPIO_Init+0x2ac>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d863      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010ae:	4a92      	ldr	r2, [pc, #584]	; (80012f8 <HAL_GPIO_Init+0x2b0>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d046      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
 80010b4:	4a90      	ldr	r2, [pc, #576]	; (80012f8 <HAL_GPIO_Init+0x2b0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d85d      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010ba:	2b12      	cmp	r3, #18
 80010bc:	d82a      	bhi.n	8001114 <HAL_GPIO_Init+0xcc>
 80010be:	2b12      	cmp	r3, #18
 80010c0:	d859      	bhi.n	8001176 <HAL_GPIO_Init+0x12e>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <HAL_GPIO_Init+0x80>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	08001143 	.word	0x08001143
 80010cc:	0800111d 	.word	0x0800111d
 80010d0:	0800112f 	.word	0x0800112f
 80010d4:	08001171 	.word	0x08001171
 80010d8:	08001177 	.word	0x08001177
 80010dc:	08001177 	.word	0x08001177
 80010e0:	08001177 	.word	0x08001177
 80010e4:	08001177 	.word	0x08001177
 80010e8:	08001177 	.word	0x08001177
 80010ec:	08001177 	.word	0x08001177
 80010f0:	08001177 	.word	0x08001177
 80010f4:	08001177 	.word	0x08001177
 80010f8:	08001177 	.word	0x08001177
 80010fc:	08001177 	.word	0x08001177
 8001100:	08001177 	.word	0x08001177
 8001104:	08001177 	.word	0x08001177
 8001108:	08001177 	.word	0x08001177
 800110c:	08001125 	.word	0x08001125
 8001110:	08001139 	.word	0x08001139
 8001114:	4a79      	ldr	r2, [pc, #484]	; (80012fc <HAL_GPIO_Init+0x2b4>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d013      	beq.n	8001142 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800111a:	e02c      	b.n	8001176 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e029      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	3304      	adds	r3, #4
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e024      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	68db      	ldr	r3, [r3, #12]
 8001132:	3308      	adds	r3, #8
 8001134:	623b      	str	r3, [r7, #32]
          break;
 8001136:	e01f      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	330c      	adds	r3, #12
 800113e:	623b      	str	r3, [r7, #32]
          break;
 8001140:	e01a      	b.n	8001178 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d102      	bne.n	8001150 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800114a:	2304      	movs	r3, #4
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e013      	b.n	8001178 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d105      	bne.n	8001164 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001158:	2308      	movs	r3, #8
 800115a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	611a      	str	r2, [r3, #16]
          break;
 8001162:	e009      	b.n	8001178 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001164:	2308      	movs	r3, #8
 8001166:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	69fa      	ldr	r2, [r7, #28]
 800116c:	615a      	str	r2, [r3, #20]
          break;
 800116e:	e003      	b.n	8001178 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
          break;
 8001174:	e000      	b.n	8001178 <HAL_GPIO_Init+0x130>
          break;
 8001176:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d801      	bhi.n	8001182 <HAL_GPIO_Init+0x13a>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	e001      	b.n	8001186 <HAL_GPIO_Init+0x13e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3304      	adds	r3, #4
 8001186:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001188:	69bb      	ldr	r3, [r7, #24]
 800118a:	2bff      	cmp	r3, #255	; 0xff
 800118c:	d802      	bhi.n	8001194 <HAL_GPIO_Init+0x14c>
 800118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	e002      	b.n	800119a <HAL_GPIO_Init+0x152>
 8001194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001196:	3b08      	subs	r3, #8
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	210f      	movs	r1, #15
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	401a      	ands	r2, r3
 80011ac:	6a39      	ldr	r1, [r7, #32]
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	fa01 f303 	lsl.w	r3, r1, r3
 80011b4:	431a      	orrs	r2, r3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f000 80b1 	beq.w	800132a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011c8:	4b4d      	ldr	r3, [pc, #308]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	4a4c      	ldr	r2, [pc, #304]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011ce:	f043 0301 	orr.w	r3, r3, #1
 80011d2:	6193      	str	r3, [r2, #24]
 80011d4:	4b4a      	ldr	r3, [pc, #296]	; (8001300 <HAL_GPIO_Init+0x2b8>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011e0:	4a48      	ldr	r2, [pc, #288]	; (8001304 <HAL_GPIO_Init+0x2bc>)
 80011e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e4:	089b      	lsrs	r3, r3, #2
 80011e6:	3302      	adds	r3, #2
 80011e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f0:	f003 0303 	and.w	r3, r3, #3
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	220f      	movs	r2, #15
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	68fa      	ldr	r2, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a40      	ldr	r2, [pc, #256]	; (8001308 <HAL_GPIO_Init+0x2c0>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_GPIO_Init+0x1ec>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a3f      	ldr	r2, [pc, #252]	; (800130c <HAL_GPIO_Init+0x2c4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00d      	beq.n	8001230 <HAL_GPIO_Init+0x1e8>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a3e      	ldr	r2, [pc, #248]	; (8001310 <HAL_GPIO_Init+0x2c8>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x1e4>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a3d      	ldr	r2, [pc, #244]	; (8001314 <HAL_GPIO_Init+0x2cc>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_GPIO_Init+0x1e0>
 8001224:	2303      	movs	r3, #3
 8001226:	e006      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001228:	2304      	movs	r3, #4
 800122a:	e004      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 800122c:	2302      	movs	r3, #2
 800122e:	e002      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_GPIO_Init+0x1ee>
 8001234:	2300      	movs	r3, #0
 8001236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	4313      	orrs	r3, r2
 8001244:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001246:	492f      	ldr	r1, [pc, #188]	; (8001304 <HAL_GPIO_Init+0x2bc>)
 8001248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	68fa      	ldr	r2, [r7, #12]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d006      	beq.n	800126e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001260:	4b2d      	ldr	r3, [pc, #180]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	492c      	ldr	r1, [pc, #176]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	608b      	str	r3, [r1, #8]
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800126e:	4b2a      	ldr	r3, [pc, #168]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	43db      	mvns	r3, r3
 8001276:	4928      	ldr	r1, [pc, #160]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001278:	4013      	ands	r3, r2
 800127a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001284:	2b00      	cmp	r3, #0
 8001286:	d006      	beq.n	8001296 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001288:	4b23      	ldr	r3, [pc, #140]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 800128a:	68da      	ldr	r2, [r3, #12]
 800128c:	4922      	ldr	r1, [pc, #136]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	4313      	orrs	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
 8001294:	e006      	b.n	80012a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001296:	4b20      	ldr	r3, [pc, #128]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 8001298:	68da      	ldr	r2, [r3, #12]
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	43db      	mvns	r3, r3
 800129e:	491e      	ldr	r1, [pc, #120]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012a0:	4013      	ands	r3, r2
 80012a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d006      	beq.n	80012be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012b0:	4b19      	ldr	r3, [pc, #100]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4918      	ldr	r1, [pc, #96]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012be:	4b16      	ldr	r3, [pc, #88]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	4914      	ldr	r1, [pc, #80]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d021      	beq.n	800131c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	490e      	ldr	r1, [pc, #56]	; (8001318 <HAL_GPIO_Init+0x2d0>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
 80012e4:	e021      	b.n	800132a <HAL_GPIO_Init+0x2e2>
 80012e6:	bf00      	nop
 80012e8:	10320000 	.word	0x10320000
 80012ec:	10310000 	.word	0x10310000
 80012f0:	10220000 	.word	0x10220000
 80012f4:	10210000 	.word	0x10210000
 80012f8:	10120000 	.word	0x10120000
 80012fc:	10110000 	.word	0x10110000
 8001300:	40021000 	.word	0x40021000
 8001304:	40010000 	.word	0x40010000
 8001308:	40010800 	.word	0x40010800
 800130c:	40010c00 	.word	0x40010c00
 8001310:	40011000 	.word	0x40011000
 8001314:	40011400 	.word	0x40011400
 8001318:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <HAL_GPIO_Init+0x304>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	43db      	mvns	r3, r3
 8001324:	4909      	ldr	r1, [pc, #36]	; (800134c <HAL_GPIO_Init+0x304>)
 8001326:	4013      	ands	r3, r2
 8001328:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	3301      	adds	r3, #1
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	fa22 f303 	lsr.w	r3, r2, r3
 800133a:	2b00      	cmp	r3, #0
 800133c:	f47f ae8e 	bne.w	800105c <HAL_GPIO_Init+0x14>
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	372c      	adds	r7, #44	; 0x2c
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
 800135c:	4613      	mov	r3, r2
 800135e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001360:	787b      	ldrb	r3, [r7, #1]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001366:	887a      	ldrh	r2, [r7, #2]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800136c:	e003      	b.n	8001376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	041a      	lsls	r2, r3, #16
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d101      	bne.n	8001392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e272      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8087 	beq.w	80014ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013a0:	4b92      	ldr	r3, [pc, #584]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 030c 	and.w	r3, r3, #12
 80013a8:	2b04      	cmp	r3, #4
 80013aa:	d00c      	beq.n	80013c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013ac:	4b8f      	ldr	r3, [pc, #572]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 030c 	and.w	r3, r3, #12
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d112      	bne.n	80013de <HAL_RCC_OscConfig+0x5e>
 80013b8:	4b8c      	ldr	r3, [pc, #560]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c4:	d10b      	bne.n	80013de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c6:	4b89      	ldr	r3, [pc, #548]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d06c      	beq.n	80014ac <HAL_RCC_OscConfig+0x12c>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d168      	bne.n	80014ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e24c      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013e6:	d106      	bne.n	80013f6 <HAL_RCC_OscConfig+0x76>
 80013e8:	4b80      	ldr	r3, [pc, #512]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a7f      	ldr	r2, [pc, #508]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e02e      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d10c      	bne.n	8001418 <HAL_RCC_OscConfig+0x98>
 80013fe:	4b7b      	ldr	r3, [pc, #492]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a7a      	ldr	r2, [pc, #488]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001408:	6013      	str	r3, [r2, #0]
 800140a:	4b78      	ldr	r3, [pc, #480]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a77      	ldr	r2, [pc, #476]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001414:	6013      	str	r3, [r2, #0]
 8001416:	e01d      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001420:	d10c      	bne.n	800143c <HAL_RCC_OscConfig+0xbc>
 8001422:	4b72      	ldr	r3, [pc, #456]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a71      	ldr	r2, [pc, #452]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800142c:	6013      	str	r3, [r2, #0]
 800142e:	4b6f      	ldr	r3, [pc, #444]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a6e      	ldr	r2, [pc, #440]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001438:	6013      	str	r3, [r2, #0]
 800143a:	e00b      	b.n	8001454 <HAL_RCC_OscConfig+0xd4>
 800143c:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a6a      	ldr	r2, [pc, #424]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b68      	ldr	r3, [pc, #416]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a67      	ldr	r2, [pc, #412]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d013      	beq.n	8001484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fce2 	bl	8000e24 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001464:	f7ff fcde 	bl	8000e24 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b64      	cmp	r3, #100	; 0x64
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e200      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001476:	4b5d      	ldr	r3, [pc, #372]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0xe4>
 8001482:	e014      	b.n	80014ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff fcce 	bl	8000e24 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fcca 	bl	8000e24 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e1ec      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800149e:	4b53      	ldr	r3, [pc, #332]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x10c>
 80014aa:	e000      	b.n	80014ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d063      	beq.n	8001582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014ba:	4b4c      	ldr	r3, [pc, #304]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 030c 	and.w	r3, r3, #12
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00b      	beq.n	80014de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014c6:	4b49      	ldr	r3, [pc, #292]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d11c      	bne.n	800150c <HAL_RCC_OscConfig+0x18c>
 80014d2:	4b46      	ldr	r3, [pc, #280]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d116      	bne.n	800150c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0302 	and.w	r3, r3, #2
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d005      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d001      	beq.n	80014f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014f2:	2301      	movs	r3, #1
 80014f4:	e1c0      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f6:	4b3d      	ldr	r3, [pc, #244]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	4939      	ldr	r1, [pc, #228]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001506:	4313      	orrs	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	e03a      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	691b      	ldr	r3, [r3, #16]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d020      	beq.n	8001556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001514:	4b36      	ldr	r3, [pc, #216]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001516:	2201      	movs	r2, #1
 8001518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800151a:	f7ff fc83 	bl	8000e24 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fc7f 	bl	8000e24 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1a1      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001534:	4b2d      	ldr	r3, [pc, #180]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	00db      	lsls	r3, r3, #3
 800154e:	4927      	ldr	r1, [pc, #156]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001550:	4313      	orrs	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
 8001554:	e015      	b.n	8001582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <HAL_RCC_OscConfig+0x270>)
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155c:	f7ff fc62 	bl	8000e24 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001564:	f7ff fc5e 	bl	8000e24 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e180      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d03a      	beq.n	8001604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d019      	beq.n	80015ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b17      	ldr	r3, [pc, #92]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fc42 	bl	8000e24 <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fc3e 	bl	8000e24 <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e160      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b0d      	ldr	r3, [pc, #52]	; (80015ec <HAL_RCC_OscConfig+0x26c>)
 80015b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015c2:	2001      	movs	r0, #1
 80015c4:	f000 fa9c 	bl	8001b00 <RCC_Delay>
 80015c8:	e01c      	b.n	8001604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ca:	4b0a      	ldr	r3, [pc, #40]	; (80015f4 <HAL_RCC_OscConfig+0x274>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d0:	f7ff fc28 	bl	8000e24 <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d6:	e00f      	b.n	80015f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d8:	f7ff fc24 	bl	8000e24 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d908      	bls.n	80015f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e146      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	42420000 	.word	0x42420000
 80015f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	4b92      	ldr	r3, [pc, #584]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f003 0302 	and.w	r3, r3, #2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d1e9      	bne.n	80015d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0304 	and.w	r3, r3, #4
 800160c:	2b00      	cmp	r3, #0
 800160e:	f000 80a6 	beq.w	800175e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001616:	4b8b      	ldr	r3, [pc, #556]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10d      	bne.n	800163e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b88      	ldr	r3, [pc, #544]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a87      	ldr	r2, [pc, #540]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b85      	ldr	r3, [pc, #532]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800163e:	4b82      	ldr	r3, [pc, #520]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800164a:	4b7f      	ldr	r3, [pc, #508]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a7e      	ldr	r2, [pc, #504]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff fbe5 	bl	8000e24 <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff fbe1 	bl	8000e24 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b64      	cmp	r3, #100	; 0x64
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e103      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x4c8>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x312>
 8001684:	4b6f      	ldr	r3, [pc, #444]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	6a1b      	ldr	r3, [r3, #32]
 8001688:	4a6e      	ldr	r2, [pc, #440]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	f043 0301 	orr.w	r3, r3, #1
 800168e:	6213      	str	r3, [r2, #32]
 8001690:	e02d      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10c      	bne.n	80016b4 <HAL_RCC_OscConfig+0x334>
 800169a:	4b6a      	ldr	r3, [pc, #424]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a69      	ldr	r2, [pc, #420]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b67      	ldr	r3, [pc, #412]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a66      	ldr	r2, [pc, #408]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
 80016b2:	e01c      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	2b05      	cmp	r3, #5
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x356>
 80016bc:	4b61      	ldr	r3, [pc, #388]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	6a1b      	ldr	r3, [r3, #32]
 80016c0:	4a60      	ldr	r2, [pc, #384]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6213      	str	r3, [r2, #32]
 80016c8:	4b5e      	ldr	r3, [pc, #376]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	4a5d      	ldr	r2, [pc, #372]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	6213      	str	r3, [r2, #32]
 80016d4:	e00b      	b.n	80016ee <HAL_RCC_OscConfig+0x36e>
 80016d6:	4b5b      	ldr	r3, [pc, #364]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	4a5a      	ldr	r2, [pc, #360]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016dc:	f023 0301 	bic.w	r3, r3, #1
 80016e0:	6213      	str	r3, [r2, #32]
 80016e2:	4b58      	ldr	r3, [pc, #352]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a57      	ldr	r2, [pc, #348]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0304 	bic.w	r3, r3, #4
 80016ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d015      	beq.n	8001722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016f6:	f7ff fb95 	bl	8000e24 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff fb91 	bl	8000e24 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0b1      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	4b4b      	ldr	r3, [pc, #300]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ee      	beq.n	80016fe <HAL_RCC_OscConfig+0x37e>
 8001720:	e014      	b.n	800174c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001722:	f7ff fb7f 	bl	8000e24 <HAL_GetTick>
 8001726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001728:	e00a      	b.n	8001740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800172a:	f7ff fb7b 	bl	8000e24 <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	f241 3288 	movw	r2, #5000	; 0x1388
 8001738:	4293      	cmp	r3, r2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e09b      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	4b40      	ldr	r3, [pc, #256]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1ee      	bne.n	800172a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800174c:	7dfb      	ldrb	r3, [r7, #23]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d105      	bne.n	800175e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001752:	4b3c      	ldr	r3, [pc, #240]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	4a3b      	ldr	r2, [pc, #236]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	2b00      	cmp	r3, #0
 8001764:	f000 8087 	beq.w	8001876 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001768:	4b36      	ldr	r3, [pc, #216]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d061      	beq.n	8001838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	69db      	ldr	r3, [r3, #28]
 8001778:	2b02      	cmp	r3, #2
 800177a:	d146      	bne.n	800180a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b33      	ldr	r3, [pc, #204]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001782:	f7ff fb4f 	bl	8000e24 <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178a:	f7ff fb4b 	bl	8000e24 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e06d      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179c:	4b29      	ldr	r3, [pc, #164]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1f0      	bne.n	800178a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017b0:	d108      	bne.n	80017c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017b2:	4b24      	ldr	r3, [pc, #144]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4921      	ldr	r1, [pc, #132]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017c0:	4313      	orrs	r3, r2
 80017c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c4:	4b1f      	ldr	r3, [pc, #124]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a19      	ldr	r1, [r3, #32]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	430b      	orrs	r3, r1
 80017d6:	491b      	ldr	r1, [pc, #108]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017dc:	4b1b      	ldr	r3, [pc, #108]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 80017de:	2201      	movs	r2, #1
 80017e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e2:	f7ff fb1f 	bl	8000e24 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff fb1b 	bl	8000e24 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e03d      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d0f0      	beq.n	80017ea <HAL_RCC_OscConfig+0x46a>
 8001808:	e035      	b.n	8001876 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_RCC_OscConfig+0x4cc>)
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001810:	f7ff fb08 	bl	8000e24 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fb04 	bl	8000e24 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e026      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x498>
 8001836:	e01e      	b.n	8001876 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d107      	bne.n	8001850 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e019      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
 8001844:	40021000 	.word	0x40021000
 8001848:	40007000 	.word	0x40007000
 800184c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_OscConfig+0x500>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a1b      	ldr	r3, [r3, #32]
 8001860:	429a      	cmp	r2, r3
 8001862:	d106      	bne.n	8001872 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001876:	2300      	movs	r3, #0
}
 8001878:	4618      	mov	r0, r3
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000

08001884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0d0      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001898:	4b6a      	ldr	r3, [pc, #424]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d910      	bls.n	80018c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0207 	bic.w	r2, r3, #7
 80018ae:	4965      	ldr	r1, [pc, #404]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b63      	ldr	r3, [pc, #396]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b8      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d020      	beq.n	8001916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018e0:	4b59      	ldr	r3, [pc, #356]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0308 	and.w	r3, r3, #8
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d005      	beq.n	8001904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018f8:	4b53      	ldr	r3, [pc, #332]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4a52      	ldr	r2, [pc, #328]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80018fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001904:	4b50      	ldr	r3, [pc, #320]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	494d      	ldr	r1, [pc, #308]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d040      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d107      	bne.n	800193a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192a:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d115      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e07f      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d107      	bne.n	8001952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d109      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e073      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001952:	4b3d      	ldr	r3, [pc, #244]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e06b      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001962:	4b39      	ldr	r3, [pc, #228]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f023 0203 	bic.w	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	4936      	ldr	r1, [pc, #216]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001970:	4313      	orrs	r3, r2
 8001972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001974:	f7ff fa56 	bl	8000e24 <HAL_GetTick>
 8001978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800197a:	e00a      	b.n	8001992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800197c:	f7ff fa52 	bl	8000e24 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	f241 3288 	movw	r2, #5000	; 0x1388
 800198a:	4293      	cmp	r3, r2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e053      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001992:	4b2d      	ldr	r3, [pc, #180]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 020c 	and.w	r2, r3, #12
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	429a      	cmp	r2, r3
 80019a2:	d1eb      	bne.n	800197c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
 80019ac:	683a      	ldr	r2, [r7, #0]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d210      	bcs.n	80019d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019b2:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0207 	bic.w	r2, r3, #7
 80019ba:	4922      	ldr	r1, [pc, #136]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	4313      	orrs	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c2:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_ClockConfig+0x1c0>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d001      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e032      	b.n	8001a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0304 	and.w	r3, r3, #4
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d008      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019e0:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	4916      	ldr	r1, [pc, #88]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d009      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019fe:	4b12      	ldr	r3, [pc, #72]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	490e      	ldr	r1, [pc, #56]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a12:	f000 f821 	bl	8001a58 <HAL_RCC_GetSysClockFreq>
 8001a16:	4602      	mov	r2, r0
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_ClockConfig+0x1c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 030f 	and.w	r3, r3, #15
 8001a22:	490a      	ldr	r1, [pc, #40]	; (8001a4c <HAL_RCC_ClockConfig+0x1c8>)
 8001a24:	5ccb      	ldrb	r3, [r1, r3]
 8001a26:	fa22 f303 	lsr.w	r3, r2, r3
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <HAL_RCC_ClockConfig+0x1cc>)
 8001a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_RCC_ClockConfig+0x1d0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff f9b4 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40022000 	.word	0x40022000
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	080026d4 	.word	0x080026d4
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b087      	sub	sp, #28
 8001a5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a72:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <HAL_RCC_GetSysClockFreq+0x94>)
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b04      	cmp	r3, #4
 8001a80:	d002      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x30>
 8001a82:	2b08      	cmp	r3, #8
 8001a84:	d003      	beq.n	8001a8e <HAL_RCC_GetSysClockFreq+0x36>
 8001a86:	e027      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a88:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a8a:	613b      	str	r3, [r7, #16]
      break;
 8001a8c:	e027      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	0c9b      	lsrs	r3, r3, #18
 8001a92:	f003 030f 	and.w	r3, r3, #15
 8001a96:	4a17      	ldr	r2, [pc, #92]	; (8001af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a98:	5cd3      	ldrb	r3, [r2, r3]
 8001a9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d010      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001aa6:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_RCC_GetSysClockFreq+0x94>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	0c5b      	lsrs	r3, r3, #17
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a0d      	ldr	r2, [pc, #52]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aba:	fb03 f202 	mul.w	r2, r3, r2
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac4:	617b      	str	r3, [r7, #20]
 8001ac6:	e004      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	4a0c      	ldr	r2, [pc, #48]	; (8001afc <HAL_RCC_GetSysClockFreq+0xa4>)
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	613b      	str	r3, [r7, #16]
      break;
 8001ad6:	e002      	b.n	8001ade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ada:	613b      	str	r3, [r7, #16]
      break;
 8001adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ade:	693b      	ldr	r3, [r7, #16]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	371c      	adds	r7, #28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40021000 	.word	0x40021000
 8001af0:	007a1200 	.word	0x007a1200
 8001af4:	080026e4 	.word	0x080026e4
 8001af8:	080026f4 	.word	0x080026f4
 8001afc:	003d0900 	.word	0x003d0900

08001b00 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <RCC_Delay+0x34>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <RCC_Delay+0x38>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0a5b      	lsrs	r3, r3, #9
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	fb02 f303 	mul.w	r3, r2, r3
 8001b1a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b1c:	bf00      	nop
  }
  while (Delay --);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	1e5a      	subs	r2, r3, #1
 8001b22:	60fa      	str	r2, [r7, #12]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d1f9      	bne.n	8001b1c <RCC_Delay+0x1c>
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bc80      	pop	{r7}
 8001b32:	4770      	bx	lr
 8001b34:	20000000 	.word	0x20000000
 8001b38:	10624dd3 	.word	0x10624dd3

08001b3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d101      	bne.n	8001b4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e076      	b.n	8001c3c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d108      	bne.n	8001b68 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b5e:	d009      	beq.n	8001b74 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	61da      	str	r2, [r3, #28]
 8001b66:	e005      	b.n	8001b74 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d106      	bne.n	8001b94 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f7ff f852 	bl	8000c38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2202      	movs	r2, #2
 8001b98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001baa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a1b      	ldr	r3, [r3, #32]
 8001bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf8:	ea42 0103 	orr.w	r1, r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c00:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	0c1a      	lsrs	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f002 0204 	and.w	r2, r2, #4
 8001c1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	69da      	ldr	r2, [r3, #28]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2201      	movs	r2, #1
 8001c36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b088      	sub	sp, #32
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	4613      	mov	r3, r2
 8001c52:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d101      	bne.n	8001c66 <HAL_SPI_Transmit+0x22>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e12d      	b.n	8001ec2 <HAL_SPI_Transmit+0x27e>
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c6e:	f7ff f8d9 	bl	8000e24 <HAL_GetTick>
 8001c72:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c74:	88fb      	ldrh	r3, [r7, #6]
 8001c76:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d002      	beq.n	8001c8a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c84:	2302      	movs	r3, #2
 8001c86:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c88:	e116      	b.n	8001eb8 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_SPI_Transmit+0x52>
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c9a:	e10d      	b.n	8001eb8 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	88fa      	ldrh	r2, [r7, #6]
 8001cb4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	88fa      	ldrh	r2, [r7, #6]
 8001cba:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce2:	d10f      	bne.n	8001d04 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d0e:	2b40      	cmp	r3, #64	; 0x40
 8001d10:	d007      	beq.n	8001d22 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d2a:	d14f      	bne.n	8001dcc <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <HAL_SPI_Transmit+0xf6>
 8001d34:	8afb      	ldrh	r3, [r7, #22]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d142      	bne.n	8001dc0 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	881a      	ldrh	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	1c9a      	adds	r2, r3, #2
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	3b01      	subs	r3, #1
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d5e:	e02f      	b.n	8001dc0 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d112      	bne.n	8001d94 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	881a      	ldrh	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	1c9a      	adds	r2, r3, #2
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	86da      	strh	r2, [r3, #54]	; 0x36
 8001d92:	e015      	b.n	8001dc0 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001d94:	f7ff f846 	bl	8000e24 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	683a      	ldr	r2, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d803      	bhi.n	8001dac <HAL_SPI_Transmit+0x168>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001daa:	d102      	bne.n	8001db2 <HAL_SPI_Transmit+0x16e>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001dbe:	e07b      	b.n	8001eb8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1ca      	bne.n	8001d60 <HAL_SPI_Transmit+0x11c>
 8001dca:	e050      	b.n	8001e6e <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_SPI_Transmit+0x196>
 8001dd4:	8afb      	ldrh	r3, [r7, #22]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d144      	bne.n	8001e64 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	330c      	adds	r3, #12
 8001de4:	7812      	ldrb	r2, [r2, #0]
 8001de6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e00:	e030      	b.n	8001e64 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d113      	bne.n	8001e38 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	330c      	adds	r3, #12
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	1c5a      	adds	r2, r3, #1
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e36:	e015      	b.n	8001e64 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e38:	f7fe fff4 	bl	8000e24 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d803      	bhi.n	8001e50 <HAL_SPI_Transmit+0x20c>
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e4e:	d102      	bne.n	8001e56 <HAL_SPI_Transmit+0x212>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8001e62:	e029      	b.n	8001eb8 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1c9      	bne.n	8001e02 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	6839      	ldr	r1, [r7, #0]
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f000 fbd8 	bl	8002628 <SPI_EndRxTxTransaction>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2220      	movs	r2, #32
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10a      	bne.n	8001ea2 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68db      	ldr	r3, [r3, #12]
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d002      	beq.n	8001eb0 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	77fb      	strb	r3, [r7, #31]
 8001eae:	e003      	b.n	8001eb8 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ec0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3720      	adds	r7, #32
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b088      	sub	sp, #32
 8001ece:	af02      	add	r7, sp, #8
 8001ed0:	60f8      	str	r0, [r7, #12]
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d002      	beq.n	8001ef0 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8001eea:	2302      	movs	r3, #2
 8001eec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001eee:	e0fb      	b.n	80020e8 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ef8:	d112      	bne.n	8001f20 <HAL_SPI_Receive+0x56>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10e      	bne.n	8001f20 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2204      	movs	r2, #4
 8001f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001f0a:	88fa      	ldrh	r2, [r7, #6]
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4613      	mov	r3, r2
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 f8ef 	bl	80020fa <HAL_SPI_TransmitReceive>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	e0e8      	b.n	80020f2 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d101      	bne.n	8001f2e <HAL_SPI_Receive+0x64>
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	e0e1      	b.n	80020f2 <HAL_SPI_Receive+0x228>
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2201      	movs	r2, #1
 8001f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f36:	f7fe ff75 	bl	8000e24 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <HAL_SPI_Receive+0x7e>
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d102      	bne.n	8001f4e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001f4c:	e0cc      	b.n	80020e8 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2204      	movs	r2, #4
 8001f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	88fa      	ldrh	r2, [r7, #6]
 8001f66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	88fa      	ldrh	r2, [r7, #6]
 8001f6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2200      	movs	r2, #0
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f94:	d10f      	bne.n	8001fb6 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fa4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001fb4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc0:	2b40      	cmp	r3, #64	; 0x40
 8001fc2:	d007      	beq.n	8001fd4 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d16a      	bne.n	80020b2 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001fdc:	e032      	b.n	8002044 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d115      	bne.n	8002018 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f103 020c 	add.w	r2, r3, #12
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002016:	e015      	b.n	8002044 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002018:	f7fe ff04 	bl	8000e24 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d803      	bhi.n	8002030 <HAL_SPI_Receive+0x166>
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800202e:	d102      	bne.n	8002036 <HAL_SPI_Receive+0x16c>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002042:	e051      	b.n	80020e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002048:	b29b      	uxth	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1c7      	bne.n	8001fde <HAL_SPI_Receive+0x114>
 800204e:	e035      	b.n	80020bc <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b01      	cmp	r3, #1
 800205c:	d113      	bne.n	8002086 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002068:	b292      	uxth	r2, r2
 800206a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002070:	1c9a      	adds	r2, r3, #2
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800207a:	b29b      	uxth	r3, r3
 800207c:	3b01      	subs	r3, #1
 800207e:	b29a      	uxth	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002084:	e015      	b.n	80020b2 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002086:	f7fe fecd 	bl	8000e24 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	429a      	cmp	r2, r3
 8002094:	d803      	bhi.n	800209e <HAL_SPI_Receive+0x1d4>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800209c:	d102      	bne.n	80020a4 <HAL_SPI_Receive+0x1da>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d106      	bne.n	80020b2 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80020b0:	e01a      	b.n	80020e8 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1c9      	bne.n	8002050 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80020bc:	693a      	ldr	r2, [r7, #16]
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 fa5f 	bl	8002584 <SPI_EndRxTransaction>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d002      	beq.n	80020d2 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	2220      	movs	r2, #32
 80020d0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d002      	beq.n	80020e0 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	75fb      	strb	r3, [r7, #23]
 80020de:	e003      	b.n	80020e8 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3718      	adds	r7, #24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b08c      	sub	sp, #48	; 0x30
 80020fe:	af00      	add	r7, sp, #0
 8002100:	60f8      	str	r0, [r7, #12]
 8002102:	60b9      	str	r1, [r7, #8]
 8002104:	607a      	str	r2, [r7, #4]
 8002106:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002108:	2301      	movs	r3, #1
 800210a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800210c:	2300      	movs	r3, #0
 800210e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002118:	2b01      	cmp	r3, #1
 800211a:	d101      	bne.n	8002120 <HAL_SPI_TransmitReceive+0x26>
 800211c:	2302      	movs	r3, #2
 800211e:	e198      	b.n	8002452 <HAL_SPI_TransmitReceive+0x358>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002128:	f7fe fe7c 	bl	8000e24 <HAL_GetTick>
 800212c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002142:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002146:	2b01      	cmp	r3, #1
 8002148:	d00f      	beq.n	800216a <HAL_SPI_TransmitReceive+0x70>
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002150:	d107      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d103      	bne.n	8002162 <HAL_SPI_TransmitReceive+0x68>
 800215a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800215e:	2b04      	cmp	r3, #4
 8002160:	d003      	beq.n	800216a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002162:	2302      	movs	r3, #2
 8002164:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002168:	e16d      	b.n	8002446 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d005      	beq.n	800217c <HAL_SPI_TransmitReceive+0x82>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_SPI_TransmitReceive+0x82>
 8002176:	887b      	ldrh	r3, [r7, #2]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d103      	bne.n	8002184 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002182:	e160      	b.n	8002446 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b04      	cmp	r3, #4
 800218e:	d003      	beq.n	8002198 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2205      	movs	r2, #5
 8002194:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	887a      	ldrh	r2, [r7, #2]
 80021ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	887a      	ldrh	r2, [r7, #2]
 80021ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	887a      	ldrh	r2, [r7, #2]
 80021c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021d8:	2b40      	cmp	r3, #64	; 0x40
 80021da:	d007      	beq.n	80021ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f4:	d17c      	bne.n	80022f0 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <HAL_SPI_TransmitReceive+0x10a>
 80021fe:	8b7b      	ldrh	r3, [r7, #26]
 8002200:	2b01      	cmp	r3, #1
 8002202:	d16a      	bne.n	80022da <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002208:	881a      	ldrh	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002214:	1c9a      	adds	r2, r3, #2
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800221e:	b29b      	uxth	r3, r3
 8002220:	3b01      	subs	r3, #1
 8002222:	b29a      	uxth	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002228:	e057      	b.n	80022da <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b02      	cmp	r3, #2
 8002236:	d11b      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x176>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800223c:	b29b      	uxth	r3, r3
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_SPI_TransmitReceive+0x176>
 8002242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002244:	2b01      	cmp	r3, #1
 8002246:	d113      	bne.n	8002270 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224c:	881a      	ldrh	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002258:	1c9a      	adds	r2, r3, #2
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002262:	b29b      	uxth	r3, r3
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b01      	cmp	r3, #1
 800227c:	d119      	bne.n	80022b2 <HAL_SPI_TransmitReceive+0x1b8>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002282:	b29b      	uxth	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d014      	beq.n	80022b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002292:	b292      	uxth	r2, r2
 8002294:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	1c9a      	adds	r2, r3, #2
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022ae:	2301      	movs	r3, #1
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022b2:	f7fe fdb7 	bl	8000e24 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022be:	429a      	cmp	r2, r3
 80022c0:	d80b      	bhi.n	80022da <HAL_SPI_TransmitReceive+0x1e0>
 80022c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022c8:	d007      	beq.n	80022da <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80022d8:	e0b5      	b.n	8002446 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022de:	b29b      	uxth	r3, r3
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1a2      	bne.n	800222a <HAL_SPI_TransmitReceive+0x130>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d19d      	bne.n	800222a <HAL_SPI_TransmitReceive+0x130>
 80022ee:	e080      	b.n	80023f2 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <HAL_SPI_TransmitReceive+0x204>
 80022f8:	8b7b      	ldrh	r3, [r7, #26]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d16f      	bne.n	80023de <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	330c      	adds	r3, #12
 8002308:	7812      	ldrb	r2, [r2, #0]
 800230a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800231a:	b29b      	uxth	r3, r3
 800231c:	3b01      	subs	r3, #1
 800231e:	b29a      	uxth	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002324:	e05b      	b.n	80023de <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b02      	cmp	r3, #2
 8002332:	d11c      	bne.n	800236e <HAL_SPI_TransmitReceive+0x274>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d017      	beq.n	800236e <HAL_SPI_TransmitReceive+0x274>
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	2b01      	cmp	r3, #1
 8002342:	d114      	bne.n	800236e <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	330c      	adds	r3, #12
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b01      	cmp	r3, #1
 800237a:	d119      	bne.n	80023b0 <HAL_SPI_TransmitReceive+0x2b6>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002380:	b29b      	uxth	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d014      	beq.n	80023b0 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80023ac:	2301      	movs	r3, #1
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80023b0:	f7fe fd38 	bl	8000e24 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023bc:	429a      	cmp	r2, r3
 80023be:	d803      	bhi.n	80023c8 <HAL_SPI_TransmitReceive+0x2ce>
 80023c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80023c6:	d102      	bne.n	80023ce <HAL_SPI_TransmitReceive+0x2d4>
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d107      	bne.n	80023de <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80023dc:	e033      	b.n	8002446 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d19e      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x22c>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d199      	bne.n	8002326 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	f000 f916 	bl	8002628 <SPI_EndRxTxTransaction>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d006      	beq.n	8002410 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800240e:	e01a      	b.n	8002446 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10a      	bne.n	800242e <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	617b      	str	r3, [r7, #20]
 800242c:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800243c:	e003      	b.n	8002446 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800244e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002452:	4618      	mov	r0, r3
 8002454:	3730      	adds	r7, #48	; 0x30
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002468:	b2db      	uxtb	r3, r3
}
 800246a:	4618      	mov	r0, r3
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002484:	f7fe fcce 	bl	8000e24 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	4413      	add	r3, r2
 8002492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002494:	f7fe fcc6 	bl	8000e24 <HAL_GetTick>
 8002498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	0d1b      	lsrs	r3, r3, #20
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024aa:	e054      	b.n	8002556 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024b2:	d050      	beq.n	8002556 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024b4:	f7fe fcb6 	bl	8000e24 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d902      	bls.n	80024ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d13d      	bne.n	8002546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80024d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80024e2:	d111      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ec:	d004      	beq.n	80024f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f6:	d107      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002510:	d10f      	bne.n	8002532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e017      	b.n	8002576 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	3b01      	subs	r3, #1
 8002554:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4013      	ands	r3, r2
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	429a      	cmp	r2, r3
 8002564:	bf0c      	ite	eq
 8002566:	2301      	moveq	r3, #1
 8002568:	2300      	movne	r3, #0
 800256a:	b2db      	uxtb	r3, r3
 800256c:	461a      	mov	r2, r3
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	429a      	cmp	r2, r3
 8002572:	d19b      	bne.n	80024ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3720      	adds	r7, #32
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000000 	.word	0x20000000

08002584 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002598:	d111      	bne.n	80025be <SPI_EndRxTransaction+0x3a>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025a2:	d004      	beq.n	80025ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025ac:	d107      	bne.n	80025be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025bc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025c6:	d117      	bne.n	80025f8 <SPI_EndRxTransaction+0x74>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d0:	d112      	bne.n	80025f8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2200      	movs	r2, #0
 80025da:	2101      	movs	r1, #1
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff ff49 	bl	8002474 <SPI_WaitFlagStateUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01a      	beq.n	800261e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ec:	f043 0220 	orr.w	r2, r3, #32
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e013      	b.n	8002620 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	2200      	movs	r2, #0
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f7ff ff36 	bl	8002474 <SPI_WaitFlagStateUntilTimeout>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d007      	beq.n	800261e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	f043 0220 	orr.w	r2, r3, #32
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e000      	b.n	8002620 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af02      	add	r7, sp, #8
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	9300      	str	r3, [sp, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	2180      	movs	r1, #128	; 0x80
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff ff18 	bl	8002474 <SPI_WaitFlagStateUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d007      	beq.n	800265a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f043 0220 	orr.w	r2, r3, #32
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e000      	b.n	800265c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <memset>:
 8002664:	4603      	mov	r3, r0
 8002666:	4402      	add	r2, r0
 8002668:	4293      	cmp	r3, r2
 800266a:	d100      	bne.n	800266e <memset+0xa>
 800266c:	4770      	bx	lr
 800266e:	f803 1b01 	strb.w	r1, [r3], #1
 8002672:	e7f9      	b.n	8002668 <memset+0x4>

08002674 <__libc_init_array>:
 8002674:	b570      	push	{r4, r5, r6, lr}
 8002676:	2600      	movs	r6, #0
 8002678:	4d0c      	ldr	r5, [pc, #48]	; (80026ac <__libc_init_array+0x38>)
 800267a:	4c0d      	ldr	r4, [pc, #52]	; (80026b0 <__libc_init_array+0x3c>)
 800267c:	1b64      	subs	r4, r4, r5
 800267e:	10a4      	asrs	r4, r4, #2
 8002680:	42a6      	cmp	r6, r4
 8002682:	d109      	bne.n	8002698 <__libc_init_array+0x24>
 8002684:	f000 f81a 	bl	80026bc <_init>
 8002688:	2600      	movs	r6, #0
 800268a:	4d0a      	ldr	r5, [pc, #40]	; (80026b4 <__libc_init_array+0x40>)
 800268c:	4c0a      	ldr	r4, [pc, #40]	; (80026b8 <__libc_init_array+0x44>)
 800268e:	1b64      	subs	r4, r4, r5
 8002690:	10a4      	asrs	r4, r4, #2
 8002692:	42a6      	cmp	r6, r4
 8002694:	d105      	bne.n	80026a2 <__libc_init_array+0x2e>
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	f855 3b04 	ldr.w	r3, [r5], #4
 800269c:	4798      	blx	r3
 800269e:	3601      	adds	r6, #1
 80026a0:	e7ee      	b.n	8002680 <__libc_init_array+0xc>
 80026a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a6:	4798      	blx	r3
 80026a8:	3601      	adds	r6, #1
 80026aa:	e7f2      	b.n	8002692 <__libc_init_array+0x1e>
 80026ac:	080026f8 	.word	0x080026f8
 80026b0:	080026f8 	.word	0x080026f8
 80026b4:	080026f8 	.word	0x080026f8
 80026b8:	080026fc 	.word	0x080026fc

080026bc <_init>:
 80026bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026be:	bf00      	nop
 80026c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026c2:	bc08      	pop	{r3}
 80026c4:	469e      	mov	lr, r3
 80026c6:	4770      	bx	lr

080026c8 <_fini>:
 80026c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ca:	bf00      	nop
 80026cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026ce:	bc08      	pop	{r3}
 80026d0:	469e      	mov	lr, r3
 80026d2:	4770      	bx	lr
